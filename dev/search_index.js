var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RandomTweaks","category":"page"},{"location":"#RandomTweaks","page":"Home","title":"RandomTweaks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RandomTweaks]","category":"page"},{"location":"#RandomTweaks.curve_fraction-Tuple{Function,Real,Real,Real}","page":"Home","title":"RandomTweaks.curve_fraction","text":"curve_fraction(f::Function,a::Real,b::Real,r::Real) -> Float64\n\nRetunrs the position of the fraction of the length from the interval <a, b>, where the length of the curve is given by one parameter function f.\n\nArguments\n\nf::Function: function of the curve,\na::Real: left-bound of the interval to be integrated on,\nb::Real: right-bound of the interval to be integrated on,\nr::Real: fraction of the length of the curve given by f from the left,\nrtol:Real: default rtol = 1e-13, relative tolerance,\n\nKeywords\n\nReturns\n\nFloat64: position of the fraction of the length from the interval <a, b>. \n\nThrows\n\n\n\n\n\n","category":"method"},{"location":"#RandomTweaks.curve_length-Tuple{Function,Real,Real}","page":"Home","title":"RandomTweaks.curve_length","text":"curve_length(f::Function,a::Real,b::Real;rtol=1e-13) -> Float64\n\nCalculates the length of the curve given by f, where f is function of one parameter, on interval <a, b> of said parameter.\n\nArguments\n\nf::Function: function of the curve to be measured,\na::Real: left-bound of the interval to be integrated on,\nb::Real: right-bound of the interval to be integrated on,\nrtol::Real: default rtol = 1e-13, relative tolerance,\n\nKeywords\n\nReturns\n\nFloat64: length of the curve defined by the f on the interval <a, b>. \n\nThrows\n\n\n\n\n\n","category":"method"},{"location":"#RandomTweaks.load_file_line_by_line-Tuple{AbstractString}","page":"Home","title":"RandomTweaks.load_file_line_by_line","text":"load_file_line_by_line(filename::AbstractString) -> Array{SubString{String},1}\n\nLoad and return the content of the text file filename in Array{SubString{String},1}, i.e., one element for each line.\n\nArguments\n\nfilename::AbstractString: the filename of the file to load,\n\nKeywords\n\nReturns\n\nArray{SubString{String},1}: the array of the file content,\n\nThrows\n\nError: in the case of file does not exist.\n\n\n\n\n\n","category":"method"}]
}
